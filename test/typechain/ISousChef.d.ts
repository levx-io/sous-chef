/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ISousChefInterface extends ethers.utils.Interface {
  functions: {
    "burnYieldToken(address,uint256)": FunctionFragment;
    "claimSushiRewardWithBurningYieldToken(uint256,uint256)": FunctionFragment;
    "claimWithPermit(uint256,uint256,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "createYieldTokens(uint256[],address[])": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "depositWithPermit(uint256,uint256,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "pendingSushiRewardWithYieldToken(uint256,uint256)": FunctionFragment;
    "pendingYieldToken(uint256)": FunctionFragment;
    "sushiBar()": FunctionFragment;
    "sushiRewardPerYieldToken()": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
    "withdrawWithPermit(uint256,uint256,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "yTokenInfoOf(uint256)": FunctionFragment;
    "yieldTokenCodeHash()": FunctionFragment;
    "yieldTokenOf(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "burnYieldToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSushiRewardWithBurningYieldToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimWithPermit",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createYieldTokens",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositWithPermit",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingSushiRewardWithYieldToken",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingYieldToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sushiBar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sushiRewardPerYieldToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawWithPermit",
    values: [
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "yTokenInfoOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldTokenCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "yieldTokenOf",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "burnYieldToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSushiRewardWithBurningYieldToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createYieldTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingSushiRewardWithYieldToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingYieldToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sushiBar", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sushiRewardPerYieldToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yTokenInfoOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldTokenCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldTokenOf",
    data: BytesLike
  ): Result;

  events: {
    "Claimed(address,uint256,address)": EventFragment;
    "Deposited(address,uint256,address)": EventFragment;
    "UpdateMultipleRewardStrategy(uint256,address,address,address)": EventFragment;
    "Withdrawn(address,uint256,address)": EventFragment;
    "YieldTokenCreated(uint256,address,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "UpdateMultipleRewardStrategy"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YieldTokenCreated"): EventFragment;
}

export type ClaimedEvent = TypedEvent<
  [string, BigNumber, string] & {
    yieldToken: string;
    amount: BigNumber;
    to: string;
  }
>;

export type DepositedEvent = TypedEvent<
  [string, BigNumber, string] & {
    yieldToken: string;
    amount: BigNumber;
    to: string;
  }
>;

export type UpdateMultipleRewardStrategyEvent = TypedEvent<
  [BigNumber, string, string, string] & {
    pid: BigNumber;
    lpToken: string;
    yieldToken: string;
    strategy: string;
  }
>;

export type WithdrawnEvent = TypedEvent<
  [string, BigNumber, string] & {
    yieldToken: string;
    amount: BigNumber;
    to: string;
  }
>;

export type YieldTokenCreatedEvent = TypedEvent<
  [BigNumber, string, string, string] & {
    pid: BigNumber;
    lpToken: string;
    yieldToken: string;
    strategy: string;
  }
>;

export class ISousChef extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ISousChefInterface;

  functions: {
    burnYieldToken(
      yieldToken: string,
      yieldTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimSushiRewardWithBurningYieldToken(
      pid: BigNumberish,
      yieldTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimWithPermit(
      pid: BigNumberish,
      yieldTokenAmount: BigNumberish,
      yieldToken: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createYieldTokens(
      pids: BigNumberish[],
      strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      lpToken: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pendingSushiRewardWithYieldToken(
      pid: BigNumberish,
      yieldTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sushiReward: BigNumber }>;

    pendingYieldToken(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { yieldTokenAmount: BigNumber }>;

    sushiBar(overrides?: CallOverrides): Promise<[string]>;

    sushiRewardPerYieldToken(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { sushiReward: BigNumber }>;

    userInfo(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        userAmount: BigNumber;
        rewardDebt: BigNumber;
        xSushiRewardDebt: BigNumber;
      }
    >;

    withdraw(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      lpToken: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yTokenInfoOf(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        lpToken: string;
        yieldToken: string;
        strategy: string;
        accXSushiPerShare: BigNumber;
      }
    >;

    yieldTokenCodeHash(overrides?: CallOverrides): Promise<[string]>;

    yieldTokenOf(lpToken: string, overrides?: CallOverrides): Promise<[string]>;
  };

  burnYieldToken(
    yieldToken: string,
    yieldTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimSushiRewardWithBurningYieldToken(
    pid: BigNumberish,
    yieldTokenAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimWithPermit(
    pid: BigNumberish,
    yieldTokenAmount: BigNumberish,
    yieldToken: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createYieldTokens(
    pids: BigNumberish[],
    strategies: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositWithPermit(
    pid: BigNumberish,
    amount: BigNumberish,
    lpToken: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pendingSushiRewardWithYieldToken(
    pid: BigNumberish,
    yieldTokenAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pendingYieldToken(
    pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sushiBar(overrides?: CallOverrides): Promise<string>;

  sushiRewardPerYieldToken(overrides?: CallOverrides): Promise<BigNumber>;

  userInfo(
    pid: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      userAmount: BigNumber;
      rewardDebt: BigNumber;
      xSushiRewardDebt: BigNumber;
    }
  >;

  withdraw(
    pid: BigNumberish,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawWithPermit(
    pid: BigNumberish,
    amount: BigNumberish,
    lpToken: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yTokenInfoOf(
    pid: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber] & {
      lpToken: string;
      yieldToken: string;
      strategy: string;
      accXSushiPerShare: BigNumber;
    }
  >;

  yieldTokenCodeHash(overrides?: CallOverrides): Promise<string>;

  yieldTokenOf(lpToken: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    burnYieldToken(
      yieldToken: string,
      yieldTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimSushiRewardWithBurningYieldToken(
      pid: BigNumberish,
      yieldTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimWithPermit(
      pid: BigNumberish,
      yieldTokenAmount: BigNumberish,
      yieldToken: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createYieldTokens(
      pids: BigNumberish[],
      strategies: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        reward: BigNumber;
        yieldTokenReward: BigNumber;
      }
    >;

    depositWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      lpToken: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingSushiRewardWithYieldToken(
      pid: BigNumberish,
      yieldTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingYieldToken(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sushiBar(overrides?: CallOverrides): Promise<string>;

    sushiRewardPerYieldToken(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        userAmount: BigNumber;
        rewardDebt: BigNumber;
        xSushiRewardDebt: BigNumber;
      }
    >;

    withdraw(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        reward: BigNumber;
        yieldTokenReward: BigNumber;
      }
    >;

    withdrawWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      lpToken: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yTokenInfoOf(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber] & {
        lpToken: string;
        yieldToken: string;
        strategy: string;
        accXSushiPerShare: BigNumber;
      }
    >;

    yieldTokenCodeHash(overrides?: CallOverrides): Promise<string>;

    yieldTokenOf(lpToken: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Claimed(address,uint256,address)"(
      yieldToken?: string | null,
      amount?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { yieldToken: string; amount: BigNumber; to: string }
    >;

    Claimed(
      yieldToken?: string | null,
      amount?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { yieldToken: string; amount: BigNumber; to: string }
    >;

    "Deposited(address,uint256,address)"(
      yieldToken?: string | null,
      amount?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { yieldToken: string; amount: BigNumber; to: string }
    >;

    Deposited(
      yieldToken?: string | null,
      amount?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { yieldToken: string; amount: BigNumber; to: string }
    >;

    "UpdateMultipleRewardStrategy(uint256,address,address,address)"(
      pid?: BigNumberish | null,
      lpToken?: string | null,
      yieldToken?: string | null,
      strategy?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { pid: BigNumber; lpToken: string; yieldToken: string; strategy: string }
    >;

    UpdateMultipleRewardStrategy(
      pid?: BigNumberish | null,
      lpToken?: string | null,
      yieldToken?: string | null,
      strategy?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { pid: BigNumber; lpToken: string; yieldToken: string; strategy: string }
    >;

    "Withdrawn(address,uint256,address)"(
      yieldToken?: string | null,
      amount?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { yieldToken: string; amount: BigNumber; to: string }
    >;

    Withdrawn(
      yieldToken?: string | null,
      amount?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { yieldToken: string; amount: BigNumber; to: string }
    >;

    "YieldTokenCreated(uint256,address,address,address)"(
      pid?: BigNumberish | null,
      lpToken?: string | null,
      yieldToken?: string | null,
      strategy?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { pid: BigNumber; lpToken: string; yieldToken: string; strategy: string }
    >;

    YieldTokenCreated(
      pid?: BigNumberish | null,
      lpToken?: string | null,
      yieldToken?: string | null,
      strategy?: null
    ): TypedEventFilter<
      [BigNumber, string, string, string],
      { pid: BigNumber; lpToken: string; yieldToken: string; strategy: string }
    >;
  };

  estimateGas: {
    burnYieldToken(
      yieldToken: string,
      yieldTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimSushiRewardWithBurningYieldToken(
      pid: BigNumberish,
      yieldTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimWithPermit(
      pid: BigNumberish,
      yieldTokenAmount: BigNumberish,
      yieldToken: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createYieldTokens(
      pids: BigNumberish[],
      strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      lpToken: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pendingSushiRewardWithYieldToken(
      pid: BigNumberish,
      yieldTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingYieldToken(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sushiBar(overrides?: CallOverrides): Promise<BigNumber>;

    sushiRewardPerYieldToken(overrides?: CallOverrides): Promise<BigNumber>;

    userInfo(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      lpToken: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yTokenInfoOf(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yieldTokenCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    yieldTokenOf(
      lpToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnYieldToken(
      yieldToken: string,
      yieldTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimSushiRewardWithBurningYieldToken(
      pid: BigNumberish,
      yieldTokenAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimWithPermit(
      pid: BigNumberish,
      yieldTokenAmount: BigNumberish,
      yieldToken: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createYieldTokens(
      pids: BigNumberish[],
      strategies: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      lpToken: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pendingSushiRewardWithYieldToken(
      pid: BigNumberish,
      yieldTokenAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingYieldToken(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sushiBar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sushiRewardPerYieldToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      pid: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      pid: BigNumberish,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawWithPermit(
      pid: BigNumberish,
      amount: BigNumberish,
      lpToken: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yTokenInfoOf(
      pid: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yieldTokenCodeHash(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yieldTokenOf(
      lpToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
